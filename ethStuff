
     //WORKS GET USDC VALUE
      // web3.eth.getTransactionReceipt("0xda6ad8119e0f6da97f81b8a194ac94b79681a225a99c259970a4e5b09bf2e18d", (err, wei) => {
      //   console.log(parseInt(wei.logs[0].data, 16)) ;
      // })
    
    function fetchDibileList() {
      web3 = new Web3("https://goerli.infura.io/v3/92014429957f49ce9358f23a559fd0d1")

      // web3.eth.getBalance("0xEf1b253d04aeE934350D10C54fd14F4338590F24", (err, wei) => {
      //   balance = web3.utils.fromWei(wei, 'ether');
      //   console.log(balance);
      // })
      // decodeTx('0xda6ad8119e0f6da97f81b8a194ac94b79681a225a99c259970a4e5b09bf2e18d');


      const CONTRACT_ABI = getContractAbi();
      const contract = new web3.eth.Contract(CONTRACT_ABI, "0xd68A8ABEb9B7435A2652680A767c382DE857Ed6b");
      var idToOwner = {};
      var digibleList = [];

      contract.getPastEvents("allEvents",
        {
          fromBlock: 0,
          toBlock: 'latest' // You can also specify 'latest'          
        })
        .then(async (events) => {
          //console.log(events.filter(event=> event.returnValues["0"] == "0x5e1320Aa48eB7C927A9386f6B194bF57de149645" || event.returnValues["0"] == "0x324c7fc6c5dd20f7ec67565aff682bdd4aef4993"));
          // console.log(events.filter(event => event.returnValues.tokenId == 14));
          //console.log(events.filter(event => event.returnValues.tokenId == 14)[0].transactionHash);

          // web3.eth.getTransaction(events.filter(event => event.returnValues.tokenId == 14)[0].transactionHash, (err, tx) => {
          //   let tx_data = tx.input;
          //   let input_data = '0x' + tx_data.slice(10);  // get only data without function selector

          //   let params = web3.eth.abi.decodeParameters(['bytes32', 'string', 'string', 'bool'], input_data);
          //   console.log(params);

          //   // console.log(web3.utils.toAscii(wei.input));
          // })

          const tokenids = events.map(event => event.returnValues.tokenId);

          events.forEach(event => {
            const digiData = digibleList.find(o => o.id == event.returnValues.tokenId);
            if (digiData != undefined) {
              digiData.owner = event.returnValues.to;
              digiData.history.push(event);
            } else {
              const newData = {};
              newData.id = event.returnValues.tokenId;
              newData.owner = event.returnValues.to;
              newData.history = [event];
              digibleList.push(newData);
            }
          });

          let count = 0;

          for (let digiData of digibleList) {

            if (count > 2) {
              const data = await getDigidata(digiData.history[0].transactionHash);

              if (data) {
                digiData.name = data.name;
                digiData.img = data.img;
                digiData.isPhysical = data.isPhysical;
              }
            }

            count++;
          }

          console.log(digibleList);

          localStorage.setItem("events", JSON.stringify(digibleList));
        })
        .catch((err) => console.error(err));
    }



    
    // function decodeTx(hex) {
    //   var tx = new ethereumjs.Tx(hex);
    //   console.log('tx', tx)

    //   var rawTx = {
    //     nonce: parseInt(tx.nonce.toString('hex') || '0', 16),
    //     gasPrice: parseInt(tx.gasPrice.toString('hex'), 16),
    //     gasLimit: parseInt(tx.gasLimit.toString('hex'), 16),
    //     to: '0x' + tx.to.toString('hex'),
    //     value: parseInt(tx.value.toString('hex') || '0', 16),
    //     data: tx.data.toString('hex'),
    //   };

    //   if (tx.r.length) {
    //     rawTx = {
    //       ...rawTx,

    //       from: '0x' + tx.from.toString('hex'),
    //       r: tx.r.toString('hex'),
    //       v: tx.v.toString('hex'),
    //       s: tx.s.toString('hex'),
    //     }
    //   }

    //   console.log(rawTx);

    //   return rawTx
    // }